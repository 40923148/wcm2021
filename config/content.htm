<h1>First</h1>
<p></p>
<h1>網路環境</h1>
<p><span>在學校:</span></p>
<p><span>在家裡:</span></p>
<h1>Heroku 網站</h1>
<p>靜態heroku:<a href="https://s40923148.herokuapp.com/content/index.html">https://s40923148.herokuapp.com/content/index.html</a></p>
<p>1.<span>進入 </span><a href="https://heroku.com/">https://heroku.com</a><span>, 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,  並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.</span></p>
<p>2.建立一個新的倉儲如:s409231xx</p>
<p>3.下載<span>Heroku cli 程式檔案, 解開至隨身碟</span></p>
<p>4.修改start的路徑:</p>
<p>set path_heroku=%Disk%:\heroku\bin; (bin加到路徑<br/>path=%Disk%:;%path_python%;%path_portablegit% ;%path_heroku% ;%path%; 把heroku連結</p>
<p>5.測試可否執行 輸入:<span>heroku version 若</span><span>回應所使用的版本表示上述路徑設定已經成功</span></p>
<p>6.heroku login<span> </span>-i <span>以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv6\_netrc</span></p>
<p>7.設定同步倉儲  heroku git:remote -a s409231xx</p>
<p>8.正常推送git push heroku </p>
<p><img alt="" src="https://youtu.be/hpx5guU0Jjc"/></p>
<p>           <iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/hpx5guU0Jjc" width="560"></iframe></p>
<h1>網路直播</h1>
<p>OBS</p>
<p>注意:</p>
<p>1.youtube第一次直播至少需要一天準備</p>
<p>2.設定裡確定串流金要與youtube相同</p>
<p>3.來源要設定清楚</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bbnm4YSx6Q4" width="560"></iframe></p>
<h1>動態網站</h1>
<p><span>動態heroku:<a href="https://a40923148.herokuapp.com/">https://a40923148.herokuapp.com/</a></span></p>
<p>                :<a href="https://c40923148.herokuapp.com/">https://c40923148.herokuapp.com/</a></p>
<p>github倉儲:<a href="https://github.com/40923148/nfulist">https://github.com/40923148/nfulist</a></p>
<p>1.創新的Heroku，不能用已經推送過的，不然會一直錯誤。</p>
<p>2.創新的Github，然後把<span> </span><a href="https://github.com/mdecourse/nfulist/blob/master/Procfile">Procfile</a><span>,<span> </span></span><a href="https://github.com/mdecourse/nfulist/blob/master/requirements.txt">requirements.txt</a><span><span> </span>與<span> </span></span><a href="https://github.com/mdecourse/nfulist/blob/master/runtime.txt">runtime.txt</a><span>,<span> ，都推送上去。</span></span></p>
<p>3.設定wsgi.py(負責打開6~9樓教室課表)(最下面)</p>
<p>4.最後就是推送，<span>Github跟Heroku，(打開Heroku網址後在網址後加上?<code class="py plain">classroomno<span> </span></code><code class="py keyword">=</code><span><span> </span></span><code class="py string">BGAxxxx可改變教室)</code></span></p>
<p>a40923148</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
# 以下因應改為 Heroku based 程式所需導入模組,  修改步驟 1/6
from flask import Flask, request 
from flask_cors import CORS
 
 
# 修改步驟 2/6 , 加入 Flask 相關物件設定
app = Flask(__name__)
# 此一設定可以讓程式跨網域擷取資料
CORS(app)
 
# for pythn 3.9,  在近端測試時仍需要設定 proxy, 若使用 Python 3.8 執行則會自動使用系統的 Proxy 設定
proxy = 'http://[2001:288:6004:17::69]:3128'
 
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
 
# 修改步驟 3/6, 試著將程式改為網際模式, 需要套用 Flask 的網際 decorator
@app.route('/')
def timeTableList():
    semester = '1092'
    classroomno = 'BGA0810'
    column = True
 
    if semester == None:
        semester = '1092'
    if classroomno == None:
        # BGA0810 電腦輔助設計室
        classroomno = 'BGA0810'
         
    headers = {'X-Requested-With': 'XMLHttpRequest'}
 
    url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
    post_var = {'pselyr': semester, 'pselclssroom': classroomno}
 
    result = requests.post(url, data = post_var, headers = headers)
 
    soup = bs4.BeautifulSoup(result.content, 'lxml')
 
    # 先除掉所有 anchor
    for a in soup.findAll('a'):
        # bs3 語法
        #a.replaceWithChildren()
        # bs4 語法, 將標註與內容拆開
        a.unwrap()
 
    # 根據輸出設定, 取出 class='tbcls' 的 table 資料
    table = soup.find('table', {'class': 'tbcls'})
 
    # 重建 table, 設定邊線為 1 pixel
    output = "&lt;table border='1'&gt;"
 
    for i in table.contents:
        # 利用 replace 復原  
        output += str(i).replace(" ", " ")
    output += "&lt;/table&gt;"
    #print(output)
    # 修改步驟 5/6 , 因為已經將原先可列印出程式的步驟改為 function, 因此必須以 return 將擷取到的網頁資料傳回
    return output
     
# 修改步驟 4/6 , 因為改寫為網際程式後, 下列將內容存檔並自動呼叫 Firefox 的程式碼不再適用, 必須蓋掉
'''
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)
'''
 
# 修改步驟 6/6, 配合網際程式啟動,  以及 Python 程式執行與納入其他程式執行的特定進行配置
 
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)
</pre>
<p><span></span></p>
<p></p>
<p></p>
<p>c20923148</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS
  
import requests
import bs4
#import ssl
  
'''
semester=1091

courseno=0762

cp

1a 1091/0762

1b 1091/0776

cad

2a 1091/0788

2b 1091/0801

https://nfulist.herokuapp.com/?semester=1082&amp;courseno=0767
cd
2a 1082/0767
2b 1082/0780
  
2a 1072/0777
2b 1072/0790
2a 1062/0788
2a 1062/0802
  
wcm
1082/0744
  
1072/0754
1062/0765
  
wcmj
1082/2418
'''
  
app = Flask(__name__)
CORS(app)
  
@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    column = request.args.get('column')

    if semester == None:
        semester = '1091'
    if courseno == None:
        courseno = '0762'
    
    headers = {'X-Requested-With': 'XMLHttpRequest'}

    url = 'https://qry.nfu.edu.tw/studlist_ajax.php'
    post_var = {'pselyr': semester, 'pseqno': courseno}
  
    result = requests.post(url, data = post_var, headers = headers)
    soup = bs4.BeautifulSoup(result.content, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        if column == "True":
            output +=i[0] + "&lt;/br&gt;"
        else:
            output +=i[0] + "\n"
        
    return output
    #return  str(pselyr) + " + " +str(pseqno)
  
# 即使在近端仍希望以 https 模式下執行
#context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
#context.load_cert_chain('localhost.crt', 'localhost.key')
  
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)</pre>
<p>           </p>
<h1>RoboDK 執行</h1>
<p>心得:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/x3Dab0MNV5Q" width="560"></iframe></p>
<h3>第一題</h3>
<p><strong><a href="https://drive.google.com/file/d/1XoB3F5cPK8R4Y8AIWL5pKR5TQjPW8TRv/view?usp=sharing">Pick and Place 檔案下載</a></strong></p>
<p>1.可攜程式系統的命令列視窗輸入 (pip install robodk) 要連結robodk</p>
<p>2.開啟robodk(記得要前往 工具/選項/其他/打勾允許外部API並且輸入目前電腦網路IP</p>
<p>ip查詢:ipconfig /all</p>
<p>3.pick_and_place (題目資料夾)  除程式碼(.py)都拉近robodk</p>
<p>4.Python-robodk-Install.baty在SCITE啟動  (檔案在RObodk裡)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">:: cd Python

:: Install RoboDK API
python.exe -m pip install  "./Python/." -I

:: Install pylint (linting for VScode)
python.exe -m pip install "pylint&gt;=2.3" --retries=2

:: Install rope (easy variable renaming in VScode)
python.exe -m pip install "rope&gt;=0.14" --retries=2

:: Display all installed packages
python.exe Python_Versions.py

pause</pre>
<p>5.pick_and_place.py用SCITE啟動(啟動前注意ip有沒有出錯)(題目資料夾)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># KMOLab Portable RoboDK pick and place
from robolink import *    # API to communicate with robodk
from robodk import *      # robodk robotics toolbox

# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool

#----------------------------------------------
# Function definitions

def box_calc(BALLS_SIDE=4, BALLS_MAX=None):
    """Calculate a list of points (ball center) as if the balls were stored in a box"""
    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3
    xyz_list = []
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE):
            for j in range(BALLS_SIDE):
                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]
                if len(xyz_list) &gt;= BALLS_MAX:
                    return xyz_list
    return xyz_list

def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list

def balls_setup(frame, positions):
    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""
    nballs = len(positions)
    step = 1.0/(nballs - 1)
    for i in range(nballs):
        newball = frame.Paste()
        newball.setName('ball ' + str(i)) #set item name
        newball.setPose(transl(positions[i])) #set item position with respect to parent
        newball.setVisible(True, False) #make item visible but hide the reference frame
        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color

def cleanup_balls(parentnodes):
    """Delete all child items whose name starts with \"ball\", from the provided list of parent items."""
    todelete = []
    for item in parentnodes:
        todelete = todelete + item.Childs()

    for item in todelete:
        if item.Name().startswith('ball'):
            item.Delete()

def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
        
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));


#----------------------------------------------------------
# The program starts here:

# Any interaction with RoboDK must be done through RDK:
RDK = Robolink(robodk_path="C:/robodk\robodk522_portable/bin/RoboDK.exe", robodk_ip='192.168.1.111')

# Turn off automatic rendering (faster)
RDK.Render(False)

#RDK.Set_Simulation_Speed(500); # set the simulation speed

# Gather required items from the station tree
robot = RDK.Item('Fanuc M-710iC/50')
robot_tools = robot.Childs()
#robottool = RDK.Item('MainTool')
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')

# Copy a ball as an object (same as CTRL+C)
ballref = RDK.Item('reference ball')
ballref.Copy()

# Run a pre-defined station program (in RoboDK) to replace the two tables
prog_reset = RDK.Item('Replace objects')
prog_reset.RunProgram()

# Call custom procedure to remove old objects
cleanup_balls([frame1, frame2])

# Make a list of positions to place the objects
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)

# Programmatically place the objects with a custom-made procedure
balls_setup(frame1, frame1_list)

# Delete previously generated tools
for tool in robot_tools:
    if tool.Name().startswith('TCP'):
        tool.Delete()
        
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)

TCP_0 = TCP_list[0]

# Turn on automatic rendering
RDK.Render(True)

# Move balls    
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0
target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)

while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)

    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)

    # grab ntake balls from frame 1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
 
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame 2 and place the tool balls into table 2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")
        
        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)

    robot.MoveJ(target_app_frame)

# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])
</pre>
<p></p>
<h2>第二題</h2>
<p><a href="https://drive.google.com/file/d/11GFhWqvkCswY2KbLOPB7vRT0EvoiKpdU/view?usp=sharing">pick and place final 專案下載</a></p>
<p>1.關閉robodk(沒開就跳過)</p>
<p>2.Python-robodk-Install.baty在SCITE啟動  (檔案在RObodk裡)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">:: cd Python

:: Install RoboDK API
python.exe -m pip install  "./Python/." -I

:: Install pylint (linting for VScode)
python.exe -m pip install "pylint&gt;=2.3" --retries=2

:: Install rope (easy variable renaming in VScode)
python.exe -m pip install "rope&gt;=0.14" --retries=2

:: Display all installed packages
python.exe Python_Versions.py

pause</pre>
<p>3.pick_and_place_using_python_api.py用SCITE啟動(注意路徑要改成電腦robodk真正的路徑)</p>
<p>(題目資料夾)</p>
<h1>期中報告</h1>
<p><br/><br/>期中報告</p>
<p>組長:張煒中</p>
<p>組員:周玥辰，方冠勛，吳定隆，周育德，張智程</p>
<p></p>
<p><strong>綜一館 6F-9F 各實習實驗室的相關按鈕</strong></p>
<table border="1" style="border-collapse: collapse; width: 83.6426%; height: 90px;">
<tbody>
<tr style="height: 14px;">
<td style="width: 10%; height: 14px; text-align: center;">樓層</td>
<td style="width: 13%; height: 14px;"> 第一間</td>
<td style="width: 12%; height: 14px;"> 第二間</td>
<td style="width: 13.0412%; height: 14px;"> 第三間</td>
<td style="width: 12.9588%; height: 14px;"> 第四間</td>
<td style="width: 13%; height: 14px;">第五間</td>
<td style="width: 13%; height: 14px;"> 第六間</td>
</tr>
<tr style="height: 57.275px;">
<td style="width: 10%; text-align: center; height: 57.275px;">9 F</td>
<td style="width: 13%; height: 57.275px;"><a href="https://a40923148.herokuapp.com//?classroomno=BGA0901"> BGA0901 (國際會議廳) </a></td>
<td style="width: 12%; height: 57.275px;"> <a href="https://a40923148.herokuapp.com//?classroomno=BGA0911"> BGA0911 (機電實驗室) </a></td>
<td style="width: 13.0412%; height: 57.275px;"> <a href="https://a40923148.herokuapp.com//?classroomno=BGA0933"> BGA0933 (系統晶片設計實驗室) </a></td>
<td style="width: 12.9588%; height: 57.275px;"> </td>
<td style="width: 13%; height: 57.275px;"></td>
<td style="width: 13%; height: 57.275px;"> </td>
</tr>
<tr style="height: 53px;">
<td style="width: 10%; text-align: center; height: 53px;">8 F</td>
<td style="width: 13%; height: 53px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0810"> BGA0810 (電腦輔助設計室)</a></td>
<td style="width: 12%; height: 53px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0820"> BGA0820 (智慧感測與致動實驗室) </a></td>
<td style="width: 13.0412%; height: 53px;">
<p><a href="https://a40923148.herokuapp.com/?classroomno=BGA0823">BGA0823 (新產品創意設計中心)</a></p>
</td>
<td style="width: 12.9588%; height: 53px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0830">BGA0830 (電腦輔助繪圖室)</a></td>
<td style="width: 13%; height: 53px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0842"> BGA0842 (機械元件設計實驗室) </a></td>
<td style="width: 13%; height: 53px;"></td>
</tr>
<tr style="height: 63px;">
<td style="width: 10%; text-align: center; height: 63px;">7 F</td>
<td style="width: 13%; height: 63px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0710"> BGA0710 (研討室(二))</a></td>
<td style="width: 12%; height: 63px;"></td>
<td style="width: 13.0412%; height: 63px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0730">BGA0730 (研討室(一)) </a></td>
<td style="width: 12.9588%; height: 63px;"> </td>
<td style="width: 13%; height: 63px;"></td>
<td style="width: 13%; height: 63px;"> <a href="https://a40923148.herokuapp.com/?classroomno=BGA0760"> BGA0760 (逆向快速成型實驗室) </a></td>
</tr>
<tr style="height: 63px;">
<td style="width: 10%; text-align: center; height: 63px;">6 F</td>
<td style="width: 13%; height: 63px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0611"> BGA0611 (研討室(三))</a></td>
<td style="width: 12%; height: 63px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0620">BGA0620 (動態系統實驗室) </a></td>
<td style="width: 13.0412%; height: 63px;"></td>
<td style="width: 12.9588%; height: 63px;"><a href="https://a40923148.herokuapp.com/?classroomno=BGA0640"> BGA0640 (創意設計室)</a></td>
<td style="width: 13%; height: 63px;"></td>
<td style="width: 13%; height: 63px;"> </td>
</tr>
</tbody>
</table>
<p><br/> 程式碼: <a href="https://github.com/40923148/nfulist">https://github.com/40923148/nfulist</a></p>
<p>heroku:<a href="https://s40923148.herokuapp.com/content/index.html">https://s40923148.herokuapp.com/content/index.html</a></p>
<p>            <a href="https://a40923148.herokuapp.com/">https://a40923148.herokuapp.com/</a></p>
<p>gitlab:<a href="https://40923148.gitlab.io/wcm2021/content/index.html">https://40923148.gitlab.io/wcm2021/content/index.html</a></p>
<p></p>
<h1>教學影片</h1>
<h2>OBS</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bbnm4YSx6Q4" width="560"></iframe></p>
<h2>fossil</h2>
<p>fossil倉儲設定</p>
<p>教學</p>
<p>1.從老師郵件中登入fossil(用裡面附的密碼)</p>
<p>2.從wcm2021測試倉儲中創建自己的倉儲</p>
<p>3.擁有自身倉儲後在tmp資料夾下建立倉儲資料夾</p>
<p>   會使用到以下指令</p>
<p>   (1)fossil clone https://409231xx@fossil.kmol.info/u/409231xx 409231xx.fossil(下載fossil           倉儲為連結做準備)</p>
<p>   (2)fossil open ./../../40923148.fossil (連結fossil)</p>
<p>   (3)mkdir (增新資料夾)</p>
<p>   (4)git clone --recurse-submodules https://github.com/409231xx/wcm2021.git(下載github         倉儲資料</p>
<p>   (5)fossil add . (fossil改版用</p>
<p>   (6)fossil commit -m "initial add"(fossil推送用</p>
<p>4.正常推送倉儲</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/w-5Q50NXC90" width="560"></iframe></p>
<h2>分組教學</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_HYwFV8Sfkk" width="560"></iframe></p>
<p>1.fork使自己有組長倉儲</p>
<p>2.git pull  更新倉儲內容</p>
<p>3<span>Create pull request  推回組長那邊</span></p>
<p></p>
<p>1.修改</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># stage3_gen_html.py
studList = "stage3_2a.txt"
courTitle = "cd2021"

# group title initial
grpTitle = studList[:6] + "-" + studList[8] + "g"

# student Account and github Account as inputs
def perWeb(s, g):
    pSite = "&lt;a href=\"https://" + g + ".github.io/" + courTitle + "\"&gt;" + s + " web&lt;/a&gt;"
    print(pSite)

def perRepo(s, g):
    pSite = "&lt;a href=\"https://github.com/" + g + "/" + courTitle + "\"&gt;" + s + " repo&lt;/a&gt;"
    print(pSite)
    
def grpWeb(s, g, ord):
    pSite = "&lt;a href=\"https://" + g + ".github.io/" + grpTitle + str(ord) + "\"&gt;grp web&lt;/a&gt;"
    print(pSite)
    
def grpRepo(s, g, ord):
    pSite = "&lt;a href=\"https://github.com/" + g + "/" + grpTitle + str(ord) + "\"&gt;grp repo&lt;/a&gt;"
    print(pSite)

# open file, default is read mode, since txt content no chinese char
# no encoding = "UTF-8" is needed
with open(studList) as fh:
    # readlines will read into the whole line and put into list format
    # has \n at the end of each line
    data = fh.readlines()

grpCount = 0
for i in range(len(data)):
    # grpCount is the group order
    grpCount = grpCount + 1
    group = data[i].rstrip("\n").split("\t")
    # use filter to remove vacant string element
    # use [1:] to remove first element
    group = list(filter(None, group))[1:]
    print(grpTitle + str(grpCount) + "&lt;br /&gt;")
    for j in range(0, len(group), 2):
        # s is the student number
        s = group[j]
        # g is the github account
        g = group[j+1]
        perWeb(s, g)
        print("|")
        perRepo(s, g)
        print("|")
        grpWeb(s, g, grpCount)
        print("|")
        grpRepo(s, g, grpCount)
        print("&lt;br /&gt;")</pre>
<p>2.複製表單</p>
<pre>stage3_ag1	40823131	40823131	40823112	a40823112	40823123	40823123	40823145	40823145	40823136	40823136	40823109	40823109	40823116	40823116	40823108	40823108
stage3_ag2	40823151	40823151	40623121	40623121	40871106	40871106	40823102	40823102	40823104	40823104	40823106	40823106	40823101	40823101	40823132	40823132
stage3_ag3	40823119	40823119	40823150	40823150	40823103	40823103	40823107	40823107	40523252	40523252	40823154	40823154				
stage3_ag4	40823142	40823142	40823144	40823144	40823127	40823127	40823148	40823148	40823121	40823121	40823135	40823135	40823114	40823114	40823146	40823146
stage3_ag5	40823111	40823111	40823115	40823115	40823128	40823128	40823120	40823120	40823140	40823140	40823124	40823124	40823139	40823139	40823126	40823126
stage3_ag6	40823152	40823152	40823110	40823110	40823122	40823122	40823125	40823125	40823117	40823117	40823129	40823129	40823149	40823149	40823153	40823153</pre>
<p></p>
<h2>Robodk</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/x3Dab0MNV5Q" width="560"></iframe></p>
<h3>第一題</h3>
<p><strong><a href="https://drive.google.com/file/d/1XoB3F5cPK8R4Y8AIWL5pKR5TQjPW8TRv/view?usp=sharing">Pick and Place 檔案下載</a></strong></p>
<p>1.可攜程式系統的命令列視窗輸入 (pip install robodk) 要連結robodk</p>
<p>2.開啟robodk(記得要前往 工具/選項/其他/打勾允許外部API並且輸入目前電腦網路IP</p>
<p>ip查詢:ipconfig /all</p>
<p>3.pick_and_place (題目資料夾)  除程式碼(.py)都拉近robodk</p>
<p>4.Python-robodk-Install.baty在SCITE啟動  (檔案在RObodk裡)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">:: cd Python

:: Install RoboDK API
python.exe -m pip install  "./Python/." -I

:: Install pylint (linting for VScode)
python.exe -m pip install "pylint&gt;=2.3" --retries=2

:: Install rope (easy variable renaming in VScode)
python.exe -m pip install "rope&gt;=0.14" --retries=2

:: Display all installed packages
python.exe Python_Versions.py

pause</pre>
<p>5.pick_and_place.py用SCITE啟動(啟動前注意ip有沒有出錯)(題目資料夾)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># KMOLab Portable RoboDK pick and place
from robolink import *    # API to communicate with robodk
from robodk import *      # robodk robotics toolbox

# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool

#----------------------------------------------
# Function definitions

def box_calc(BALLS_SIDE=4, BALLS_MAX=None):
    """Calculate a list of points (ball center) as if the balls were stored in a box"""
    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3
    xyz_list = []
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE):
            for j in range(BALLS_SIDE):
                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]
                if len(xyz_list) &gt;= BALLS_MAX:
                    return xyz_list
    return xyz_list

def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list

def balls_setup(frame, positions):
    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""
    nballs = len(positions)
    step = 1.0/(nballs - 1)
    for i in range(nballs):
        newball = frame.Paste()
        newball.setName('ball ' + str(i)) #set item name
        newball.setPose(transl(positions[i])) #set item position with respect to parent
        newball.setVisible(True, False) #make item visible but hide the reference frame
        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color

def cleanup_balls(parentnodes):
    """Delete all child items whose name starts with \"ball\", from the provided list of parent items."""
    todelete = []
    for item in parentnodes:
        todelete = todelete + item.Childs()

    for item in todelete:
        if item.Name().startswith('ball'):
            item.Delete()

def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
        
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));


#----------------------------------------------------------
# The program starts here:

# Any interaction with RoboDK must be done through RDK:
RDK = Robolink(robodk_path="C:/robodk\robodk522_portable/bin/RoboDK.exe", robodk_ip='192.168.1.111')

# Turn off automatic rendering (faster)
RDK.Render(False)

#RDK.Set_Simulation_Speed(500); # set the simulation speed

# Gather required items from the station tree
robot = RDK.Item('Fanuc M-710iC/50')
robot_tools = robot.Childs()
#robottool = RDK.Item('MainTool')
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')

# Copy a ball as an object (same as CTRL+C)
ballref = RDK.Item('reference ball')
ballref.Copy()

# Run a pre-defined station program (in RoboDK) to replace the two tables
prog_reset = RDK.Item('Replace objects')
prog_reset.RunProgram()

# Call custom procedure to remove old objects
cleanup_balls([frame1, frame2])

# Make a list of positions to place the objects
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)

# Programmatically place the objects with a custom-made procedure
balls_setup(frame1, frame1_list)

# Delete previously generated tools
for tool in robot_tools:
    if tool.Name().startswith('TCP'):
        tool.Delete()
        
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)

TCP_0 = TCP_list[0]

# Turn on automatic rendering
RDK.Render(True)

# Move balls    
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0
target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)

while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)

    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)

    # grab ntake balls from frame 1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
 
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame 2 and place the tool balls into table 2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")
        
        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)

    robot.MoveJ(target_app_frame)

# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])
</pre>
<p></p>
<h3>第二題</h3>
<p><a href="https://drive.google.com/file/d/11GFhWqvkCswY2KbLOPB7vRT0EvoiKpdU/view?usp=sharing">pick and place final 專案下載</a></p>
<p>1.關閉robodk(沒開就跳過)</p>
<p>2.Python-robodk-Install.baty在SCITE啟動  (檔案在RObodk裡)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">:: cd Python

:: Install RoboDK API
python.exe -m pip install  "./Python/." -I

:: Install pylint (linting for VScode)
python.exe -m pip install "pylint&gt;=2.3" --retries=2

:: Install rope (easy variable renaming in VScode)
python.exe -m pip install "rope&gt;=0.14" --retries=2

:: Display all installed packages
python.exe Python_Versions.py

pause</pre>
<p>3.pick_and_place_using_python_api.py用SCITE啟動(注意路徑要改成電腦robodk真正的路徑)</p>
<p>(題目資料夾)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *
from robodk import *
 
import os
 
dir_path = os.path.dirname(os.path.realpath(__file__))
print(dir_path)
# Calculate pyramid coordinate
 
# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool
 
def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    #BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list
     
def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
         
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));
 
# Make a list of positions to place the objects
balls_list = pyramid_calc(4)
 
#print(len(frame1_list))
# 4*4 = 16
# 3*3 = 9
# 2*2 = 4
# 1+4+9+16 = 30
 
# height 50*sqrt(2)
'''
[
 
[50.0, 50.0, 50.0], [50.0, 150.0, 50.0], [50.0, 250.0, 50.0], [50.0, 350.0, 50.0], 
 
[150.0, 50.0, 50.0], [150.0, 150.0, 50.0], [150.0, 250.0, 50.0], [150.0, 350.0, 50.0], 
 
[250.0, 50.0, 50.0], [250.0, 150.0, 50.0], [250.0, 250.0, 50.0], [250.0, 350.0, 50.0], 
 
[350.0, 50.0, 50.0], [350.0, 150.0, 50.0], [350.0, 250.0, 50.0], [350.0, 350.0, 50.0], 
 
 
[100.0, 100.0, 120.71067811865474], [100.0, 200.0, 120.71067811865474], [100.0, 300.0, 120.71067811865474], 
 
[200.0, 100.0, 120.71067811865474], [200.0, 200.0, 120.71067811865474], [200.0, 300.0, 120.71067811865474], 
 
[300.0, 100.0, 120.71067811865474], [300.0, 200.0, 120.71067811865474], [300.0, 300.0, 120.71067811865474], 
 
 
[150.0, 150.0, 191.42135623730948], [150.0, 250.0, 191.42135623730948], 
 
[250.0, 150.0, 191.42135623730948], [250.0, 250.0, 191.42135623730948], 
 
 
[200.0, 200.0, 262.13203435596427]
 
]
 
'''
# https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py
# robodk_path variable to specify location of RoboDK.exe
# under Ubuntu can not use "-NEWINSTANCE"
'''
start_robodk.sh content
LD_LIBRARY_PATH="/home/yen/RoboDK/bin/lib"
export LD_LIBRARY_PATH
/home/yen/RoboDK/bin/RoboDK
'''
RDK = Robolink(robodk_path=r"C:\robodk\robodk522_portable\bin\RoboDK.exe",args=["-SKIPINI", "-EXIT_LAST_COM"])
# Add robot and the accompanied Base coordinate
print(dir_path + '/Fanuc-M-710iC-50.robot')
# relative directory or absolute directory will work for AddFile under Ubuntu
#robot = RDK.AddFile(r"/home/yen/github/wcm2021/downloads/robodk/pick_and_place_kmol_mac/Fanuc-M-710iC-50.robot")
robot = RDK.AddFile('Fanuc-M-710iC-50.robot')
# Get the default robot base frame
robot_frame = RDK.Item('Fanuc M-710iC/50 Base')
# Move the base frame to the origin
robot_frame.setPose(transl(0,0,0))
 
# Add a tool to an existing robot:
tool = RDK.AddFile(dir_path + '/MainTool.tool', robot)
 
# Add table 1
table1_frame = RDK.AddFrame('Table 1')
table1_frame.setPose(transl(807.766544,-963.699898,41.478944))
table1_stl = RDK.AddFile(dir_path + '/Table.stl', table1_frame)
 
# Add table 2
table2_frame = RDK.AddFrame('Table 2')
table2_frame.setPose(transl(926.465508,337.151529,94.871928))
table2_stl = RDK.AddFile(dir_path + '/Table.stl', table2_frame)
      
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)
 
TCP_0 = TCP_list[0]
 
# Turn on automatic rendering
RDK.Render(True)
 
# Add balls
# create a list with 30 elements
balls = [None for _ in range(30)]
layer = [16, 9, 4, 1]
count = 0
for i in range(len(balls_list)):
    # transl(balls_list)
    balls[i] = RDK.AddFile('./ball.stl', table1_frame)
    balls[i].setPose(transl(balls_list[i]))
    count = count + 1
    if count &lt;= 16:
        balls[i].setColor([1, 0, 0])
    elif count &gt; 16 and count &lt;= 25:
        balls[i].setColor([0, 1, 0])
    elif count &gt; 25 and count &lt;=29:
        balls[i].setColor([1, 1, 0])
    else:
        balls[i].setColor([0, 0, 1])
 
# Make a list of positions to place the objects
# ball_list is the same as frame1_list
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)
 
# Move balls 
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0
 
target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)
 
# frame1 is the same as table1_frame
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')
 
while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)
 
    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)
 
    # grab ntake balls from frame1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1       
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
  
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame2 and place the tool balls into table2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")
 
        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1       
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)
 
    robot.MoveJ(target_app_frame)
 
# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])</pre>
<p></p>
<h2>SSH</h2>
<p>1.首先我們需要登入github在自己的帳號中開啟設定，在設定中尋找SSH and GPG keys ，然後先按New SSHkey做準備。</p>
<p>2.在 start_ipv6.bat (編輯器)加入<span> </span><span>set GIT_SSH=%Disk%:\putty\plink.exe。</span></p>
<p><span>3.開啟 Putty 目錄中的 puttygen.exe,(沒有putty從a.kmol.info:88下載)，點擊Generate下載新Key(移動滑鼠進度條才會動)，最上面出現的亂碼為新鑰匙，全選後丟進剛剛在github預備的New SSHkey(記得存)，記得用SciTE 編輯儲存鑰匙(_rsa 檔)，然後用Save private key再存一次(.ppk檔)，兩個檔案存在tmp/keys裡</span></p>
<p>4.開啟<span>putty.exe建立一個 session用於以 ssh 協定連線到 github.com(在hostname),名稱可任意但Proxy須設定學校的(筆電不用Proxy可以選None)，Auth記得選之前儲存.ppk的檔案，最後回開頭存檔</span></p>
<p>5.最後則是要修改tmp/wcm2021/.git裡面config的url(之前的可在前面加#即可)，url改成git@(<span>session的名子)</span>:(帳號)/(倉儲名子).git(原url下面)(是origin下面的url)</p>
<p>名子盡量相同會增加成功率，失敗就多試幾次說不定會成功</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5ZuE2KHDaKU" width="560"></iframe></p><h2>heroku</h2>
<p>靜態heroku:<a href="https://s40923148.herokuapp.com/content/index.html">https://s40923148.herokuapp.com/content/index.html</a></p>
<p>1.<span>進入 </span><a href="https://heroku.com/">https://heroku.com</a><span>, 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,  並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.</span></p>
<p>2.建立一個新的倉儲如:s409231xx</p>
<p>3.下載<span>Heroku cli 程式檔案, 解開至隨身碟</span></p>
<p>4.修改start的路徑:</p>
<p>set path_heroku=%Disk%:\heroku\bin; (bin加到路徑<br/>path=%Disk%:;%path_python%;%path_portablegit% ;%path_heroku% ;%path%; 把heroku連結</p>
<p>5.測試可否執行 輸入:<span>heroku version 若</span><span>回應所使用的版本表示上述路徑設定已經成功</span></p>
<p>6.heroku login<span> </span>-i <span>以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv6\_netrc</span></p>
<p>7.設定同步倉儲  heroku git:remote -a s409231xx</p>
<p>8.正常推送git push heroku </p>
<p><img alt="" src="https://youtu.be/hpx5guU0Jjc"/></p>
<p></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/hpx5guU0Jjc" width="560"></iframe></p>
<p></p>
<p><span>動態heroku:<a href="https://a40923148.herokuapp.com/">https://a40923148.herokuapp.com/</a></span></p>
<p>                :<a href="https://c40923148.herokuapp.com/">https://c40923148.herokuapp.com/</a></p>
<p>github倉儲:<a href="https://github.com/40923148/nfulist">https://github.com/40923148/nfulist</a></p>
<p>1.創新的Heroku，不能用已經推送過的，不然會一直錯誤。</p>
<p>2.創新的Github，然後把<span> </span><a href="https://github.com/mdecourse/nfulist/blob/master/Procfile">Procfile</a><span>,<span> </span></span><a href="https://github.com/mdecourse/nfulist/blob/master/requirements.txt">requirements.txt</a><span><span> </span>與<span> </span></span><a href="https://github.com/mdecourse/nfulist/blob/master/runtime.txt">runtime.txt</a><span>,<span> ，都推送上去。</span></span></p>
<p>3.設定wsgi.py(負責打開6~9樓教室課表)(最下面)</p>
<p>4.最後就是推送，<span>Github跟Heroku，(打開Heroku網址後在網址後加上?<code class="py plain">classroomno<span> </span></code><code class="py keyword">=</code><span><span> </span></span><code class="py string">BGAxxxx可改變教室)</code></span></p>
<p><span><code class="py string"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RFIkZ75SfTQ" width="560"></iframe></code></span></p>
<p>a40923148</p>
<p></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_275676">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">import</code> <code class="py plain">requests</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">import</code> <code class="py plain">bs4</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># for os.environ and os.system</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number5 index4 alt2"><code class="py comments"># for geting html file path</code></div>
<div class="line number6 index5 alt1"><code class="py keyword">import</code> <code class="py plain">pathlib</code></div>
<div class="line number7 index6 alt2"><code class="py comments"># 以下因應改為 Heroku based 程式所需導入模組,  修改步驟 1/6</code></div>
<div class="line number8 index7 alt1"><code class="py keyword">from</code> <code class="py plain">flask </code><code class="py keyword">import</code> <code class="py plain">Flask, request </code></div>
<div class="line number9 index8 alt2"><code class="py keyword">from</code> <code class="py plain">flask_cors </code><code class="py keyword">import</code> <code class="py plain">CORS</code></div>
<div class="line number10 index9 alt1"><code class="py spaces"> </code> </div>
<div class="line number11 index10 alt2"><code class="py spaces"> </code> </div>
<div class="line number12 index11 alt1"><code class="py comments"># 修改步驟 2/6 , 加入 Flask 相關物件設定</code></div>
<div class="line number13 index12 alt2"><code class="py plain">app </code><code class="py keyword">=</code> <code class="py plain">Flask(__name__)</code></div>
<div class="line number14 index13 alt1"><code class="py comments"># 此一設定可以讓程式跨網域擷取資料</code></div>
<div class="line number15 index14 alt2"><code class="py plain">CORS(app)</code></div>
<div class="line number16 index15 alt1"><code class="py spaces"> </code> </div>
<div class="line number17 index16 alt2"><code class="py comments"># for pythn 3.9,  在近端測試時仍需要設定 proxy, 若使用 Python 3.8 執行則會自動使用系統的 Proxy 設定</code></div>
<div class="line number18 index17 alt1"><code class="py plain">proxy </code><code class="py keyword">=</code> <code class="py string">'http://[2001:288:6004:17::69]:3128'</code></div>
<div class="line number19 index18 alt2"><code class="py spaces"> </code> </div>
<div class="line number20 index19 alt1"><code class="py plain">os.environ[</code><code class="py string">'http_proxy'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy </code></div>
<div class="line number21 index20 alt2"><code class="py plain">os.environ[</code><code class="py string">'HTTP_PROXY'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy</code></div>
<div class="line number22 index21 alt1"><code class="py plain">os.environ[</code><code class="py string">'https_proxy'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy</code></div>
<div class="line number23 index22 alt2"><code class="py plain">os.environ[</code><code class="py string">'HTTPS_PROXY'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy</code></div>
<div class="line number24 index23 alt1"><code class="py comments">'''</code></div>
<div class="line number25 index24 alt2"><code class="py comments">url:  'jclassroom_ajax.php',</code></div>
<div class="line number26 index25 alt1"><code class="py comments">data: { pselyr: pselyr, pselclssroom: pselclssroom },</code></div>
<div class="line number27 index26 alt2"><code class="py comments">'''</code></div>
<div class="line number28 index27 alt1"><code class="py spaces"> </code> </div>
<div class="line number29 index28 alt2"><code class="py comments"># 修改步驟 3/6, 試著將程式改為網際模式, 需要套用 Flask 的網際 decorator</code></div>
<div class="line number30 index29 alt1"><code class="py decorator">@app</code><code class="py plain">.route(</code><code class="py string">'/'</code><code class="py plain">)</code></div>
<div class="line number31 index30 alt2"><code class="py keyword">def</code> <code class="py plain">timeTableList():</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py plain">semester </code><code class="py keyword">=</code> <code class="py string">'1092'</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py plain">classroomno </code><code class="py keyword">=</code> <code class="py string">'BGA0810'</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py plain">column </code><code class="py keyword">=</code> <code class="py color1">True</code></div>
<div class="line number35 index34 alt2"><code class="py spaces"> </code> </div>
<div class="line number36 index35 alt1"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">semester </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py color1">None</code><code class="py plain">:</code></div>
<div class="line number37 index36 alt2"><code class="py spaces">        </code><code class="py plain">semester </code><code class="py keyword">=</code> <code class="py string">'1092'</code></div>
<div class="line number38 index37 alt1"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">classroomno </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py color1">None</code><code class="py plain">:</code></div>
<div class="line number39 index38 alt2"><code class="py spaces">        </code><code class="py comments"># BGA0810 電腦輔助設計室</code></div>
<div class="line number40 index39 alt1"><code class="py spaces">        </code><code class="py plain">classroomno </code><code class="py keyword">=</code> <code class="py string">'BGA0810'</code></div>
<div class="line number41 index40 alt2"><code class="py spaces">         </code> </div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">headers </code><code class="py keyword">=</code> <code class="py plain">{</code><code class="py string">'X-Requested-With'</code><code class="py plain">: </code><code class="py string">'XMLHttpRequest'</code><code class="py plain">}</code></div>
<div class="line number43 index42 alt2"><code class="py spaces"> </code> </div>
<div class="line number44 index43 alt1"><code class="py spaces">    </code><code class="py plain">url </code><code class="py keyword">=</code> <code class="py string">'https://qry.nfu.edu.tw/jclassroom_ajax.php'</code></div>
<div class="line number45 index44 alt2"><code class="py spaces">    </code><code class="py plain">post_var </code><code class="py keyword">=</code> <code class="py plain">{</code><code class="py string">'pselyr'</code><code class="py plain">: semester, </code><code class="py string">'pselclssroom'</code><code class="py plain">: classroomno}</code></div>
<div class="line number46 index45 alt1"><code class="py spaces"> </code> </div>
<div class="line number47 index46 alt2"><code class="py spaces">    </code><code class="py plain">result </code><code class="py keyword">=</code> <code class="py plain">requests.post(url, data </code><code class="py keyword">=</code> <code class="py plain">post_var, headers </code><code class="py keyword">=</code> <code class="py plain">headers)</code></div>
<div class="line number48 index47 alt1"><code class="py spaces"> </code> </div>
<div class="line number49 index48 alt2"><code class="py spaces">    </code><code class="py plain">soup </code><code class="py keyword">=</code> <code class="py plain">bs4.BeautifulSoup(result.content, </code><code class="py string">'lxml'</code><code class="py plain">)</code></div>
<div class="line number50 index49 alt1"><code class="py spaces"> </code> </div>
<div class="line number51 index50 alt2"><code class="py spaces">    </code><code class="py comments"># 先除掉所有 anchor</code></div>
<div class="line number52 index51 alt1"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">a </code><code class="py keyword">in</code> <code class="py plain">soup.findAll(</code><code class="py string">'a'</code><code class="py plain">):</code></div>
<div class="line number53 index52 alt2"><code class="py spaces">        </code><code class="py comments"># bs3 語法</code></div>
<div class="line number54 index53 alt1"><code class="py spaces">        </code><code class="py comments">#a.replaceWithChildren()</code></div>
<div class="line number55 index54 alt2"><code class="py spaces">        </code><code class="py comments"># bs4 語法, 將標註與內容拆開</code></div>
<div class="line number56 index55 alt1"><code class="py spaces">        </code><code class="py plain">a.unwrap()</code></div>
<div class="line number57 index56 alt2"><code class="py spaces"> </code> </div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py comments"># 根據輸出設定, 取出 class='tbcls' 的 table 資料</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py plain">table </code><code class="py keyword">=</code> <code class="py plain">soup.find(</code><code class="py string">'table'</code><code class="py plain">, {</code><code class="py string">'class'</code><code class="py plain">: </code><code class="py string">'tbcls'</code><code class="py plain">})</code></div>
<div class="line number60 index59 alt1"><code class="py spaces"> </code> </div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py comments"># 重建 table, 設定邊線為 1 pixel</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py plain">output </code><code class="py keyword">=</code> <code class="py string">"&lt;table border='1'&gt;"</code></div>
<div class="line number63 index62 alt2"><code class="py spaces"> </code> </div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py plain">table.contents:</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">        </code><code class="py comments"># 利用 replace 復原  </code></div>
<div class="line number66 index65 alt1"><code class="py spaces">        </code><code class="py plain">output </code><code class="py keyword">+</code><code class="py keyword">=</code> <code class="py functions">str</code><code class="py plain">(i).replace(</code><code class="py string">" "</code><code class="py plain">, </code><code class="py string">" "</code><code class="py plain">)</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py plain">output </code><code class="py keyword">+</code><code class="py keyword">=</code> <code class="py string">"&lt;/table&gt;"</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py comments">#print(output)</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py comments"># 修改步驟 5/6 , 因為已經將原先可列印出程式的步驟改為 function, 因此必須以 return 將擷取到的網頁資料傳回</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">output</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">     </code> </div>
<div class="line number72 index71 alt1"><code class="py comments"># 修改步驟 4/6 , 因為改寫為網際程式後, 下列將內容存檔並自動呼叫 Firefox 的程式碼不再適用, 必須蓋掉</code></div>
<div class="line number73 index72 alt2"><code class="py comments">'''</code></div>
<div class="line number74 index73 alt1"><code class="py comments"># 將 output 寫入 w1_classroom.html</code></div>
<div class="line number75 index74 alt2"><code class="py comments">fileName = "w1_classroom.html"</code></div>
<div class="line number76 index75 alt1"><code class="py comments">with open(fileName, "w", encoding="utf-8") as file:</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">    </code><code class="py comments">file.write(output)</code></div>
<div class="line number78 index77 alt1"><code class="py comments"># 利用 os.system() 以 default browser 開啟 w1_class_local.html</code></div>
<div class="line number79 index78 alt2"><code class="py comments">filePath = pathlib.Path(__file__).parent.absolute()</code></div>
<div class="line number80 index79 alt1"><code class="py comments">#print(filePath)</code></div>
<div class="line number81 index80 alt2"><code class="py comments"># set firefox as default browser and start url to open html file</code></div>
<div class="line number82 index81 alt1"><code class="py comments">os.system("start file:///" + str(filePath) + "\\" + fileName)</code></div>
<div class="line number83 index82 alt2"><code class="py comments">'''</code></div>
<div class="line number84 index83 alt1"><code class="py spaces"> </code> </div>
<div class="line number85 index84 alt2"><code class="py comments"># 修改步驟 6/6, 配合網際程式啟動,  以及 Python 程式執行與納入其他程式執行的特定進行配置</code></div>
<div class="line number86 index85 alt1"><code class="py spaces"> </code> </div>
<div class="line number87 index86 alt2"><code class="py keyword">if</code> <code class="py plain">__name__ </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py string">'__main__'</code><code class="py plain">:</code></div>
<div class="line number88 index87 alt1"><code class="py spaces">    </code><code class="py plain">app.run(host</code><code class="py keyword">=</code><code class="py string">'127.0.0.1'</code><code class="py plain">, port</code><code class="py keyword">=</code><code class="py value">8080</code><code class="py plain">, debug</code><code class="py keyword">=</code><code class="py color1">True</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span></span></p>
<p></p>
<p></p>
<p>c20923148</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_926868">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
<div class="line number89 index88 alt2">89</div>
<div class="line number90 index89 alt1">90</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">flask </code><code class="py keyword">import</code> <code class="py plain">Flask, request </code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">flask_cors </code><code class="py keyword">import</code> <code class="py plain">CORS</code></div>
<div class="line number3 index2 alt2"><code class="py spaces">  </code> </div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">requests</code></div>
<div class="line number5 index4 alt2"><code class="py keyword">import</code> <code class="py plain">bs4</code></div>
<div class="line number6 index5 alt1"><code class="py comments">#import ssl</code></div>
<div class="line number7 index6 alt2"><code class="py spaces">  </code> </div>
<div class="line number8 index7 alt1"><code class="py comments">'''</code></div>
<div class="line number9 index8 alt2"><code class="py comments">semester=1091</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="py comments">courseno=0762</code></div>
<div class="line number12 index11 alt1"> </div>
<div class="line number13 index12 alt2"><code class="py comments">cp</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="py comments">1a 1091/0762</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="py comments">1b 1091/0776</code></div>
<div class="line number18 index17 alt1"> </div>
<div class="line number19 index18 alt2"><code class="py comments">cad</code></div>
<div class="line number20 index19 alt1"> </div>
<div class="line number21 index20 alt2"><code class="py comments">2a 1091/0788</code></div>
<div class="line number22 index21 alt1"> </div>
<div class="line number23 index22 alt2"><code class="py comments">2b 1091/0801</code></div>
<div class="line number24 index23 alt1"> </div>
<div class="line number25 index24 alt2"><code class="py comments">https://nfulist.herokuapp.com/?semester=1082&amp;courseno=0767</code></div>
<div class="line number26 index25 alt1"><code class="py comments">cd</code></div>
<div class="line number27 index26 alt2"><code class="py comments">2a 1082/0767</code></div>
<div class="line number28 index27 alt1"><code class="py comments">2b 1082/0780</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">  </code> </div>
<div class="line number30 index29 alt1"><code class="py comments">2a 1072/0777</code></div>
<div class="line number31 index30 alt2"><code class="py comments">2b 1072/0790</code></div>
<div class="line number32 index31 alt1"><code class="py comments">2a 1062/0788</code></div>
<div class="line number33 index32 alt2"><code class="py comments">2a 1062/0802</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">  </code> </div>
<div class="line number35 index34 alt2"><code class="py comments">wcm</code></div>
<div class="line number36 index35 alt1"><code class="py comments">1082/0744</code></div>
<div class="line number37 index36 alt2"><code class="py spaces">  </code> </div>
<div class="line number38 index37 alt1"><code class="py comments">1072/0754</code></div>
<div class="line number39 index38 alt2"><code class="py comments">1062/0765</code></div>
<div class="line number40 index39 alt1"><code class="py spaces">  </code> </div>
<div class="line number41 index40 alt2"><code class="py comments">wcmj</code></div>
<div class="line number42 index41 alt1"><code class="py comments">1082/2418</code></div>
<div class="line number43 index42 alt2"><code class="py comments">'''</code></div>
<div class="line number44 index43 alt1"><code class="py spaces">  </code> </div>
<div class="line number45 index44 alt2"><code class="py plain">app </code><code class="py keyword">=</code> <code class="py plain">Flask(__name__)</code></div>
<div class="line number46 index45 alt1"><code class="py plain">CORS(app)</code></div>
<div class="line number47 index46 alt2"><code class="py spaces">  </code> </div>
<div class="line number48 index47 alt1"><code class="py decorator">@app</code><code class="py plain">.route(</code><code class="py string">'/studlist'</code><code class="py plain">)</code></div>
<div class="line number49 index48 alt2"><code class="py decorator">@app</code><code class="py plain">.route(</code><code class="py string">'/'</code><code class="py plain">)</code></div>
<div class="line number50 index49 alt1"><code class="py keyword">def</code> <code class="py plain">studlist():</code></div>
<div class="line number51 index50 alt2"><code class="py spaces">    </code><code class="py plain">semester </code><code class="py keyword">=</code> <code class="py plain">request.args.get(</code><code class="py string">'semester'</code><code class="py plain">)</code></div>
<div class="line number52 index51 alt1"><code class="py spaces">    </code><code class="py plain">courseno </code><code class="py keyword">=</code> <code class="py plain">request.args.get(</code><code class="py string">'courseno'</code><code class="py plain">)</code></div>
<div class="line number53 index52 alt2"><code class="py spaces">    </code><code class="py plain">column </code><code class="py keyword">=</code> <code class="py plain">request.args.get(</code><code class="py string">'column'</code><code class="py plain">)</code></div>
<div class="line number54 index53 alt1"> </div>
<div class="line number55 index54 alt2"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">semester </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py color1">None</code><code class="py plain">:</code></div>
<div class="line number56 index55 alt1"><code class="py spaces">        </code><code class="py plain">semester </code><code class="py keyword">=</code> <code class="py string">'1091'</code></div>
<div class="line number57 index56 alt2"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">courseno </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py color1">None</code><code class="py plain">:</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">        </code><code class="py plain">courseno </code><code class="py keyword">=</code> <code class="py string">'0762'</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code> </div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py plain">headers </code><code class="py keyword">=</code> <code class="py plain">{</code><code class="py string">'X-Requested-With'</code><code class="py plain">: </code><code class="py string">'XMLHttpRequest'</code><code class="py plain">}</code></div>
<div class="line number61 index60 alt2"> </div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py plain">url </code><code class="py keyword">=</code> <code class="py string">'https://qry.nfu.edu.tw/studlist_ajax.php'</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py plain">post_var </code><code class="py keyword">=</code> <code class="py plain">{</code><code class="py string">'pselyr'</code><code class="py plain">: semester, </code><code class="py string">'pseqno'</code><code class="py plain">: courseno}</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">  </code> </div>
<div class="line number65 index64 alt2"><code class="py spaces">    </code><code class="py plain">result </code><code class="py keyword">=</code> <code class="py plain">requests.post(url, data </code><code class="py keyword">=</code> <code class="py plain">post_var, headers </code><code class="py keyword">=</code> <code class="py plain">headers)</code></div>
<div class="line number66 index65 alt1"><code class="py spaces">    </code><code class="py plain">soup </code><code class="py keyword">=</code> <code class="py plain">bs4.BeautifulSoup(result.content, </code><code class="py string">'lxml'</code><code class="py plain">)</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py plain">table </code><code class="py keyword">=</code> <code class="py plain">soup.find(</code><code class="py string">'table'</code><code class="py plain">, {</code><code class="py string">'class'</code><code class="py plain">: </code><code class="py string">'tbcls'</code><code class="py plain">})</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py plain">data </code><code class="py keyword">=</code> <code class="py plain">[]</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py plain">rows </code><code class="py keyword">=</code> <code class="py plain">table.find_all(</code><code class="py string">'tr'</code><code class="py plain">)</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">row </code><code class="py keyword">in</code> <code class="py plain">rows:</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">        </code><code class="py plain">cols </code><code class="py keyword">=</code> <code class="py plain">row.find_all(</code><code class="py string">'td'</code><code class="py plain">)</code></div>
<div class="line number72 index71 alt1"><code class="py spaces">        </code><code class="py plain">cols </code><code class="py keyword">=</code> <code class="py plain">[ele.text.strip() </code><code class="py keyword">for</code> <code class="py plain">ele </code><code class="py keyword">in</code> <code class="py plain">cols]</code></div>
<div class="line number73 index72 alt2"><code class="py spaces">        </code><code class="py plain">data.append([ele </code><code class="py keyword">for</code> <code class="py plain">ele </code><code class="py keyword">in</code> <code class="py plain">cols </code><code class="py keyword">if</code> <code class="py plain">ele]) </code><code class="py comments"># Get rid of empty values</code></div>
<div class="line number74 index73 alt1"><code class="py spaces">    </code><code class="py plain">output </code><code class="py keyword">=</code> <code class="py plain">""</code></div>
<div class="line number75 index74 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py plain">data[</code><code class="py value">2</code><code class="py plain">:]:</code></div>
<div class="line number76 index75 alt1"><code class="py spaces">        </code><code class="py comments">#print(i[0])</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">        </code><code class="py keyword">if</code> <code class="py plain">column </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py string">"True"</code><code class="py plain">:</code></div>
<div class="line number78 index77 alt1"><code class="py spaces">            </code><code class="py plain">output </code><code class="py keyword">+</code><code class="py keyword">=</code><code class="py plain">i[</code><code class="py value">0</code><code class="py plain">] </code><code class="py keyword">+</code> <code class="py string">"&lt;/br&gt;"</code></div>
<div class="line number79 index78 alt2"><code class="py spaces">        </code><code class="py keyword">else</code><code class="py plain">:</code></div>
<div class="line number80 index79 alt1"><code class="py spaces">            </code><code class="py plain">output </code><code class="py keyword">+</code><code class="py keyword">=</code><code class="py plain">i[</code><code class="py value">0</code><code class="py plain">] </code><code class="py keyword">+</code> <code class="py string">"\n"</code></div>
<div class="line number81 index80 alt2"><code class="py spaces">        </code> </div>
<div class="line number82 index81 alt1"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">output</code></div>
<div class="line number83 index82 alt2"><code class="py spaces">    </code><code class="py comments">#return  str(pselyr) + " + " +str(pseqno)</code></div>
<div class="line number84 index83 alt1"><code class="py spaces">  </code> </div>
<div class="line number85 index84 alt2"><code class="py comments"># 即使在近端仍希望以 https 模式下執行</code></div>
<div class="line number86 index85 alt1"><code class="py comments">#context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)</code></div>
<div class="line number87 index86 alt2"><code class="py comments">#context.load_cert_chain('localhost.crt', 'localhost.key')</code></div>
<div class="line number88 index87 alt1"><code class="py spaces">  </code> </div>
<div class="line number89 index88 alt2"><code class="py keyword">if</code> <code class="py plain">__name__ </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py string">'__main__'</code><code class="py plain">:</code></div>
<div class="line number90 index89 alt1"><code class="py spaces">    </code><code class="py plain">app.run(host</code><code class="py keyword">=</code><code class="py string">'127.0.0.1'</code><code class="py plain">, port</code><code class="py keyword">=</code><code class="py value">8080</code><code class="py plain">, debug</code><code class="py keyword">=</code><code class="py color1">True</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p></p><h1>討論影片</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/eycG0KW48Z8" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XUNbAgT1v8M" width="560"></iframe></p>
<h1>About</h1>
<p>This is <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p><span>網際內容管理 (Web-based Content Management)</span></p>
<p>利用瀏覽器作為前端, 並將數位內容有系統地送到雲端伺服器中進行管理與運用的架構即稱為網際內容管理.</p>
<p>從機械設計專業的角度看待網際內容管理.</p>
<p>機械設計工程師應該從 CAD 出發透過零組件系統建立, 模擬與控制, 並在流程中利用 CAE 進行設計功能確認後, 將所有持續改進的內容透過分散式版次與網際管理系統進行保存與數位資料再利用.</p>
<h2>語法</h2>
<p><strong>cms</strong></p>
<p>老師為了同學方便把cd cmsimde  跟wsgi.py整合在一起，讓同學可以在自己的倉儲直接打開動態網頁。</p>
<p><strong>acp</strong></p>
<p>老師把git add .、git commit -m 、git push整合，讓同學可以直接推送，但要注意沒有把這次推送加上代號可能會出錯。</p>
<p><strong>wsgi.py</strong></p>
<p>打開動態網頁</p>
<p><strong><span>git add .</span></strong></p>
<p><span>找尋更新的內容</span></p>
<p><strong>git commit -m</strong></p>
<p>把更新的內容變成一個專案，記得要加上代號</p>
<p><strong>git push</strong></p>
<p>把全部的東西推送到遠端</p>
<p><strong>path</strong></p>
<p>路徑</p>
<p><br/><strong>dir</strong></p>
<p>磁碟內容</p>
<p><strong>regedit</strong></p>
<p><strong></strong>登入編輯</p>
<p><strong>git pull origin master </strong></p>
<p>更新到最新的資料</p>
<p><strong>git clone (github網址).git</strong></p>
<p>把<span>github倉儲複製到資料夾，以git形式</span></p>
<p></p>
<h1>上課內容</h1>
<h2>w1</h2>
<p>還未選課沒上到課</p>
<h2>w2</h2>
<p><strong>更改標題</strong></p>
<p><span> </span>cmsimde 編輯及轉靜態網頁有關的認知</p>
<h2>w3</h2>
<p><strong>改版</strong></p>
<p>我上課時要改成最新版結果失敗了，詢問老師後，好像是我有弄壞一部份的靜態，需要從遠端重新抓新的下來，下課後抽時間重新抓了一次，然後又把up_dir資料夾更新，這次沒有跑一大堆錯誤出來，但我看資料夾並沒有上課所說的五個檔案，需要星期四上課再去詢問老師。</p>
<h2>w4</h2>
<p>成功的把上禮拜失敗的改版完成了，原因是，git pull指令無法被接受，需要指定哪個檔案(遠端的分支)。</p>
<p>課表原始碼介紹利用和開啟各個課表的方法(更改那些變數，和必要的變數),回去用ssh跟github連線</p>
<div class="line number1 index0 alt2"><code class="py keyword"></code>回家後測試使用SSH，結果失敗了，尋找錯誤的方法中。.......</div>
<h2>w5</h2>
<p>今天老師上課教我們更新cmsimde，跟如何設定SSH，也讓我知道握哪裡設定錯誤，是之前的錯誤，教學完後還有太多人不懂所以我就去幫同學解決他們發生錯誤的地方</p>
<h3>SSH</h3>
<p>1.首先我們需要登入github在自己的帳號中開啟設定，在設定中尋找SSH and GPG keys ，然後先按New SSHkey做準備。</p>
<p>2.在 start_ipv6.bat (編輯器)加入<span> </span><span>set GIT_SSH=%Disk%:\putty\plink.exe。</span></p>
<p><span>3.開啟 Putty 目錄中的 puttygen.exe,(沒有putty從a.kmol.info:88下載)，點擊Generate下載新Key(移動滑鼠進度條才會動)，最上面出現的亂碼為新鑰匙，全選後丟進剛剛在github預備的New SSHkey(記得存)，記得用SciTE 編輯儲存鑰匙(_rsa 檔)，然後用Save private key再存一次(.ppk檔)，兩個檔案存在tmp/keys裡</span></p>
<p>4.開啟<span>putty.exe建立一個 session用於以 ssh 協定連線到 github.com(在hostname),名稱可任意但Proxy須設定學校的(筆電不用Proxy可以選None)，Auth記得選之前儲存.ppk的檔案，最後回開頭存檔</span></p>
<p>5.最後則是要修改tmp/wcm2021/.git裡面config的url(之前的可在前面加#即可)，url改成git@(<span>session的名子)</span>:(帳號)/(倉儲名子).git(原url下面)(是origin下面的url)</p>
<p>名子盡量相同會增加成功率，失敗就多試幾次說不定會成功</p>
<p></p>
<h2>W6</h2>
<p>今天老師說了SSH的原理嚷我更加了解SSH的運作方式，雖然我依舊不明白相同的動作，有時候會設定成功有時候不行的原因是甚麼。</p>
<p>還有註冊heroku跟把<a href="/a.kmol.info:88">a.kmol.info:88</a>的heroku.7z解壓縮到data裡面，在設定<span> start_ipv6.bat (編輯器)heroku的路徑，之後要教得因為時間問題延到下禮拜(Github連結heroku的方法)</span></p>
<h2>w7</h2>
<p><span></span>開始準備期中分組報告</p>
<p>heroku連結到倉儲，需要</p>
<p>從a.kmol.info:88下載Heroku，放到data下，再用編輯器把啟動器的Heroku路徑打上。</p>
<p>測試是否有連接上，<span>輸入 heroku version，有出現版本號便成。</span></p>
<p><span>未出現原因</span></p>
<p><span>1.編輯器未編寫正確</span></p>
<p>2.檔案不完整</p>
<p>完成後推送方法</p>
<p>1.<code class="py plain">heroku login </code><code class="py keyword">-</code><code class="py plain">i  (<span>以 interactive 模式登入 Heroku)(記得打帳號密碼)</span></code></p>
<p><span face="monospace" style="font-family: monospace;">2cd到要推送得倉儲</span></p>
<p><span face="monospace" style="font-family: monospace;">3.<code class="py plain">heroku git:remote </code><code class="py keyword">-</code><code class="py plain">a s40923148(自己的)</code><code class="py plain"> (<span>針對已經登入的 Heroku 帳號下的 s40923148 app, 設為此倉儲的 remote 同步倉儲</span></code></span></p>
<p><span face="monospace" style="font-family: monospace;"><code class="py plain"><span>4.</span></code></span>git add .</p>
<p>5.git commit -am "make it better"</p>
<pre>6.git push heroku </pre>
<p><span face="monospace" style="font-family: monospace;"></span></p>
<p></p>
<p>編輯器設定</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">path=%Disk%:;%path_python%;%path_portablegit%;%path_heroku%;%path%;</pre>
<p>路近加上Heroku</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"> set path_heroku=%Disk%:\heroku\bin;</pre>
<p>標示路徑<br/><br/></p>
<p>學校電腦需要</p>
<div class="line number1 index0 alt2"><code class="js plain">REM </code><code class="js keyword">for</code> <code class="js plain">heroku login</code></div>
<div class="line number2 index1 alt1"><code class="js plain">set HTTP_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
<div class="line number3 index2 alt2"><code class="js plain">set HTTPS_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
<p></p>
<p></p>
<p></p>
<p>再次教學如何設定SSH跟解釋</p>
<h2>w8</h2>
<p>開始分組報告，要負責把一個github的倉儲推送去heroku，內容要包括機械設計系大樓教室的課表，可以的話把各個樓層都放上按鈕。</p>
<p><span>教務主機查詢電腦輔助設計室排課時間表的python介紹</span></p>
<p></p>
<h3>Heroku</h3>
<p>1.創新的Heroku，不能用已經推送過的，不然會一直錯誤。</p>
<p>2.創新的Github，然後把<span> </span><a href="https://github.com/mdecourse/nfulist/blob/master/Procfile">Procfile</a><span>,<span> </span></span><a href="https://github.com/mdecourse/nfulist/blob/master/requirements.txt">requirements.txt</a><span><span> </span>與<span> </span></span><a href="https://github.com/mdecourse/nfulist/blob/master/runtime.txt">runtime.txt</a><span>,<span> ，都推送上去。</span></span></p>
<p>3.設定wsgi.py(負責打開6~9樓教室課表)(最下面)</p>
<p>4.最後就是推送，<span>Github跟Heroku，(打開Heroku網址後在網址後加上?<code class="py plain">classroomno </code><code class="py keyword">=</code><span> </span><code class="py string">BGAxxxx可改變教室)</code></span></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
# 以下因應改為 Heroku based 程式所需導入模組,  修改步驟 1/6
from flask import Flask, request 
from flask_cors import CORS
 
 
# 修改步驟 2/6 , 加入 Flask 相關物件設定
app = Flask(__name__)
# 此一設定可以讓程式跨網域擷取資料
CORS(app)
 
# for pythn 3.9,  在近端測試時仍需要設定 proxy, 若使用 Python 3.8 執行則會自動使用系統的 Proxy 設定
proxy = 'http://[2001:288:6004:17::69]:3128'
 
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
 
# 修改步驟 3/6, 試著將程式改為網際模式, 需要套用 Flask 的網際 decorator
@app.route('/')
def timeTableList():
    semester = '1092'
    classroomno = 'BGA0810'
    column = True
 
    if semester == None:
        semester = '1092'
    if classroomno == None:
        # BGA0810 電腦輔助設計室
        classroomno = 'BGA0810'
         
    headers = {'X-Requested-With': 'XMLHttpRequest'}
 
    url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
    post_var = {'pselyr': semester, 'pselclssroom': classroomno}
 
    result = requests.post(url, data = post_var, headers = headers)
 
    soup = bs4.BeautifulSoup(result.content, 'lxml')
 
    # 先除掉所有 anchor
    for a in soup.findAll('a'):
        # bs3 語法
        #a.replaceWithChildren()
        # bs4 語法, 將標註與內容拆開
        a.unwrap()
 
    # 根據輸出設定, 取出 class='tbcls' 的 table 資料
    table = soup.find('table', {'class': 'tbcls'})
 
    # 重建 table, 設定邊線為 1 pixel
    output = "&lt;table border='1'&gt;"
 
    for i in table.contents:
        # 利用 replace 復原  
        output += str(i).replace(" ", " ")
    output += "&lt;/table&gt;"
    #print(output)
    # 修改步驟 5/6 , 因為已經將原先可列印出程式的步驟改為 function, 因此必須以 return 將擷取到的網頁資料傳回
    return output
     
# 修改步驟 4/6 , 因為改寫為網際程式後, 下列將內容存檔並自動呼叫 Firefox 的程式碼不再適用, 必須蓋掉
'''
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)
'''
 
# 修改步驟 6/6, 配合網際程式啟動,  以及 Python 程式執行與納入其他程式執行的特定進行配置
 
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)
</pre>
<h2>w9</h2>
<p>自己為自己打分數，我為自己打75分，的原因是我覺得我有認真聽課有把老師交代的作業做完，不懂還特別去找同學請教，相反別人不懂我也有盡心幫忙。</p>
<p>上台報告，由於我沒做簡報，所以我拿github的倉儲來做報告，因為上面只有我平時對上課的紀錄，跟中老師要求要做的東西，並沒有加以排版所以我報告的十分糟糕。</p>
<h2>W10  W11</h2>
<p>生病請病假</p>
<h2>w12</h2>
<p>突然生病後兩個禮拜來上課，完全不懂老師在說甚麼，robodk、虛擬網站、FileZillaPortable、Oracle VM VirtualBox一大堆不明白的東西進入腦子，只能勉強記憶下來，回去再好好消化。</p>
<p>回去想辦法處理robodk看了影片還是完全不懂，只好求助同學跟私訊老師，而虛擬網站之後的只是更加糟糕。</p>
<h2>w13</h2>
<p></p>
<h2>w14</h2>
<p>wcm2021-ag1<br/> <a href="https://40923135.github.io/wcm2021">40923135 web</a> | <a href="https://github.com/40923135/wcm2021">40923135 repo</a> | <a href="https://40923135.github.io/wcm2021-ag1">grp web</a> | <a href="https://github.com/40923135/wcm2021-ag1">grp repo</a> <br/> <a href="https://40923108.github.io/wcm2021">40923108 web</a> | <a href="https://github.com/40923108/wcm2021">40923108 repo</a> | <a href="https://40923108.github.io/wcm2021-ag1">grp web</a> | <a href="https://github.com/40923108/wcm2021-ag1">grp repo</a> <br/> <a href="https://40923101.github.io/wcm2021">40923101 web</a> | <a href="https://github.com/40923101/wcm2021">40923101 repo</a> | <a href="https://40923101.github.io/wcm2021-ag1">grp web</a> | <a href="https://github.com/40923101/wcm2021-ag1">grp repo</a> <br/> <a href="https://40923142.github.io/wcm2021">40923142 web</a> | <a href="https://github.com/40923142/wcm2021">40923142 repo</a> | <a href="https://40923142.github.io/wcm2021-ag1">grp web</a> | <a href="https://github.com/40923142/wcm2021-ag1">grp repo</a> <br/> wcm2021-ag2<br/> <a href="https://40923105.github.io/wcm2021">40923105 web</a> | <a href="https://github.com/40923105/wcm2021">40923105 repo</a> | <a href="https://40923105.github.io/wcm2021-ag2">grp web</a> | <a href="https://github.com/40923105/wcm2021-ag2">grp repo</a> <br/> <a href="https://40923104.github.io/wcm2021">40923104 web</a> | <a href="https://github.com/40923104/wcm2021">40923104 repo</a> | <a href="https://40923104.github.io/wcm2021-ag2">grp web</a> | <a href="https://github.com/40923104/wcm2021-ag2">grp repo</a> <br/> <a href="https://40923107.github.io/wcm2021">40923107 web</a> | <a href="https://github.com/40923107/wcm2021">40923107 repo</a> | <a href="https://40923107.github.io/wcm2021-ag2">grp web</a> | <a href="https://github.com/40923107/wcm2021-ag2">grp repo</a> <br/> <a href="https://40923110.github.io/wcm2021">40923110 web</a> | <a href="https://github.com/40923110/wcm2021">40923110 repo</a> | <a href="https://40923110.github.io/wcm2021-ag2">grp web</a> | <a href="https://github.com/40923110/wcm2021-ag2">grp repo</a> <br/> <a href="https://40923102.github.io/wcm2021">40923102 web</a> | <a href="https://github.com/40923102/wcm2021">40923102 repo</a> | <a href="https://40923102.github.io/wcm2021-ag2">grp web</a> | <a href="https://github.com/40923102/wcm2021-ag2">grp repo</a> <br/> <a href="https://40923106.github.io/wcm2021">40923106 web</a> | <a href="https://github.com/40923106/wcm2021">40923106 repo</a> | <a href="https://40923106.github.io/wcm2021-ag2">grp web</a> | <a href="https://github.com/40923106/wcm2021-ag2">grp repo</a> <br/> wcm2021-ag3<br/> <a href="https://40923123.github.io/wcm2021">40923123 web</a> | <a href="https://github.com/40923123/wcm2021">40923123 repo</a> | <a href="https://40923123.github.io/wcm2021-ag3">grp web</a> | <a href="https://github.com/40923123/wcm2021-ag3">grp repo</a> <br/> <a href="https://40923151.github.io/wcm2021">40923151 web</a> | <a href="https://github.com/40923151/wcm2021">40923151 repo</a> | <a href="https://40923151.github.io/wcm2021-ag3">grp web</a> | <a href="https://github.com/40923151/wcm2021-ag3">grp repo</a> <br/> <a href="https://40923139.github.io/wcm2021">40923139 web</a> | <a href="https://github.com/40923139/wcm2021">40923139 repo</a> | <a href="https://40923139.github.io/wcm2021-ag3">grp web</a> | <a href="https://github.com/40923139/wcm2021-ag3">grp repo</a> <br/> <a href="https://40923147.github.io/wcm2021">40923147 web</a> | <a href="https://github.com/40923147/wcm2021">40923147 repo</a> | <a href="https://40923147.github.io/wcm2021-ag3">grp web</a> | <a href="https://github.com/40923147/wcm2021-ag3">grp repo</a> <br/> wcm2021-ag4<br/> <a href="https://40923148.github.io/wcm2021">40923148 web</a> | <a href="https://github.com/40923148/wcm2021">40923148 repo</a> | <a href="https://40923148.github.io/wcm2021-ag4">grp web</a> | <a href="https://github.com/40923148/wcm2021-ag4">grp repo</a> <br/> <a href="https://40923111.github.io/wcm2021">40923111 web</a> | <a href="https://github.com/40923111/wcm2021">40923111 repo</a> | <a href="https://40923111.github.io/wcm2021-ag4">grp web</a> | <a href="https://github.com/40923111/wcm2021-ag4">grp repo</a> <br/> <a href="https://40923116.github.io/wcm2021">40923116 web</a> | <a href="https://github.com/40923116/wcm2021">40923116 repo</a> | <a href="https://40923116.github.io/wcm2021-ag4">grp web</a> | <a href="https://github.com/40923116/wcm2021-ag4">grp repo</a> <br/> <a href="https://40923122.github.io/wcm2021">40923122 web</a> | <a href="https://github.com/40923122/wcm2021">40923122 repo</a> | <a href="https://40923122.github.io/wcm2021-ag4">grp web</a> | <a href="https://github.com/40923122/wcm2021-ag4">grp repo</a> <br/> <a href="https://40923109.github.io/wcm2021">40923109 web</a> | <a href="https://github.com/40923109/wcm2021">40923109 repo</a> | <a href="https://40923109.github.io/wcm2021-ag4">grp web</a> | <a href="https://github.com/40923109/wcm2021-ag4">grp repo</a> <br/> <a href="https://40923146.github.io/wcm2021">40923146 web</a> | <a href="https://github.com/40923146/wcm2021">40923146 repo</a> | <a href="https://40923146.github.io/wcm2021-ag4">grp web</a> | <a href="https://github.com/40923146/wcm2021-ag4">grp repo</a> <br/> wcm2021-ag5<br/> <a href="https://40923127.github.io/wcm2021">40923127 web</a> | <a href="https://github.com/40923127/wcm2021">40923127 repo</a> | <a href="https://40923127.github.io/wcm2021-ag5">grp web</a> | <a href="https://github.com/40923127/wcm2021-ag5">grp repo</a> <br/> <a href="https://40923128.github.io/wcm2021">40923128 web</a> | <a href="https://github.com/40923128/wcm2021">40923128 repo</a> | <a href="https://40923128.github.io/wcm2021-ag5">grp web</a> | <a href="https://github.com/40923128/wcm2021-ag5">grp repo</a> <br/> <a href="https://40923125.github.io/wcm2021">40923125 web</a> | <a href="https://github.com/40923125/wcm2021">40923125 repo</a> | <a href="https://40923125.github.io/wcm2021-ag5">grp web</a> | <a href="https://github.com/40923125/wcm2021-ag5">grp repo</a> <br/> <a href="https://40923136.github.io/wcm2021">40923136 web</a> | <a href="https://github.com/40923136/wcm2021">40923136 repo</a> | <a href="https://40923136.github.io/wcm2021-ag5">grp web</a> | <a href="https://github.com/40923136/wcm2021-ag5">grp repo</a> <br/> <a href="https://40923124.github.io/wcm2021">40923124 web</a> | <a href="https://github.com/40923124/wcm2021">40923124 repo</a> | <a href="https://40923124.github.io/wcm2021-ag5">grp web</a> | <a href="https://github.com/40923124/wcm2021-ag5">grp repo</a> <br/> <a href="https://40923126-1.github.io/wcm2021">40923126 web</a> | <a href="https://github.com/40923126-1/wcm2021">40923126 repo</a> | <a href="https://40923126-1.github.io/wcm2021-ag5">grp web</a> | <a href="https://github.com/40923126-1/wcm2021-ag5">grp repo</a> <br/> wcm2021-ag6<br/> <a href="https://s40723240.github.io/wcm2021">40723240 web</a> | <a href="https://github.com/s40723240/wcm2021">40723240 repo</a> | <a href="https://s40723240.github.io/wcm2021-ag6">grp web</a> | <a href="https://github.com/s40723240/wcm2021-ag6">grp repo</a> <br/> <a href="https://s40723238.github.io/wcm2021">40723238 web</a> | <a href="https://github.com/s40723238/wcm2021">40723238 repo</a> | <a href="https://s40723238.github.io/wcm2021-ag6">grp web</a> | <a href="https://github.com/s40723238/wcm2021-ag6">grp repo</a> <br/> wcm2021-ag7<br/> <a href="https://40523923.github.io/wcm2021">40523923 web</a> | <a href="https://github.com/40523923/wcm2021">40523923 repo</a> | <a href="https://40523923.github.io/wcm2021-ag7">grp web</a> | <a href="https://github.com/40523923/wcm2021-ag7">grp repo</a> <br/> <a href="https://40523148.github.io/wcm2021">40523148 web</a> | <a href="https://github.com/40523148/wcm2021">40523148 repo</a> | <a href="https://40523148.github.io/wcm2021-ag7">grp web</a> | <a href="https://github.com/40523148/wcm2021-ag7">grp repo</a> <br/> wcm2021-ag8<br/> <a href="https://40923117.github.io/wcm2021">40923117 web</a> | <a href="https://github.com/40923117/wcm2021">40923117 repo</a> | <a href="https://40923117.github.io/wcm2021-ag8">grp web</a> | <a href="https://github.com/40923117/wcm2021-ag8">grp repo</a> <br/> <a href="https://40923120.github.io/wcm2021">40923120 web</a> | <a href="https://github.com/40923120/wcm2021">40923120 repo</a> | <a href="https://40923120.github.io/wcm2021-ag8">grp web</a> | <a href="https://github.com/40923120/wcm2021-ag8">grp repo</a> <br/> <a href="https://40923119.github.io/wcm2021">40923119 web</a> | <a href="https://github.com/40923119/wcm2021">40923119 repo</a> | <a href="https://40923119.github.io/wcm2021-ag8">grp web</a> | <a href="https://github.com/40923119/wcm2021-ag8">grp repo</a> <br/> wcm2021-ag9<br/> wcm2021-ag10</p>
<h2>w15</h2>
<p>創建分組倉儲</p>
<p>倉儲:<a href="https://40923148.github.io/wcm2021-ag4/content/index.html">https://40923148.github.io/wcm2021-ag4/content/index.html</a></p>
<h2>w16</h2>
<p>將13~15周所做的事情推到<a href="https://github.com/mdecourse/wcm2021/discussions/19">https://github.com/mdecourse/wcm2021/discussions/19</a></p>
<p></p>
<h3>作業</h3>
<p>16~18周功課布置<span>完成兩台 Heroku 平台上的虛擬主機</span></p>
<h4><span>主機一: 利用 Heroku 呈現靜態網頁內容.</span></h4>
<p>此一網站必須包含個人學習心得, 上課過程的筆記, 以及下列各 H1 頁面, 其他 H2 與 H3 頁面由各學員視實際需要自行加入:</p>
<p>提示: 課程網頁中<a href="http://mde.tw/wcm2021/content/Heroku-%E5%AF%A6%E4%BD%9C.html?q=heroku">與 Heroku 有關</a>的頁面.</p>
<p>標題為:<span> </span><span>網路環境</span></p>
<p>說明個人在線上課程階段, 所使用上網環境紀錄報告, 其中包括如何上網, 有哪些設定等. 完成後請將操作流程影片嵌入頁面.</p>
<p>標題為:<span> </span><span>Heroku 網站</span></p>
<p>說明如何透過上述網路環境與工具, 完成 Heroku CMSiMDE 靜態網頁的建立. 完成後請將操作流程影片嵌入頁面.</p>
<p>標題為:<span> </span><span>網路直播</span></p>
<p>說明如何透過線上 OBS + Youtube 進行直播, 過程中以那些設定與注意事項. 完成後請將操作流程影片嵌入頁面.</p>
<p>標題為:<span> </span><span>RoboDK 執行</span></p>
<p>說明曾經做過哪些與 RoboDK相關的練習, 過程中如何進行, 分別獲得那些心得? 完成後請將操作流程影片嵌入頁面.</p>
<h4><span>主機二: Heroku Python 應用程式主機</span></h4>
<p>請在上述網頁中, 增加一個標題為"<span>動態網站</span>" 的 H1 頁面, 並且利用 CMSiMDE 建立一台動態網站主機. 完成後請在頁面附上所完成的主機連結, 並且將操作流程影片嵌入頁面.</p>
<p>提示:<span> </span><a href="https://nfulist.herokuapp.com/">https://nfulist.herokuapp.com</a><span> </span>就是一台典型的 Python 應用程式主機. (<a href="https://github.com/mdecourse/nfulist">nfulist 原始碼</a>)</p>
<div id="gtx-trans" style="position: absolute; left: -11px; top: 11549.4px;">
<div class="gtx-trans-icon"></div>
</div>